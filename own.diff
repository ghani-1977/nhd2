diff -Naur nhd2-exp.orig/src/gui/imageinfo.cpp nhd2-exp/src/gui/imageinfo.cpp
--- nhd2-exp.orig/src/gui/imageinfo.cpp	2014-12-29 21:40:23.000000000 +0100
+++ nhd2-exp/src/gui/imageinfo.cpp	2014-12-29 21:43:34.000000000 +0100
@@ -188,17 +188,17 @@
 	// image name
 	ypos += iheight;
 	paintLine(xpos    , font_info, g_Locale->getText(LOCALE_IMAGEINFO_IMAGE));
-	paintLine(xpos + 125, font_info, imagename);
+	paintLine(xpos + 150, font_info, imagename);
 
 	// image date
 	ypos += iheight;
 	paintLine(xpos    , font_info, g_Locale->getText(LOCALE_IMAGEINFO_DATE));
-	paintLine(xpos+125, font_info, imagedate);
+	paintLine(xpos + 150, font_info, imagedate);
 
 	// release cycle
 	ypos += iheight;
 	paintLine(xpos    , font_info, g_Locale->getText(LOCALE_IMAGEINFO_VERSION));
-	paintLine(xpos + 125, font_info, releaseCycle);
+	paintLine(xpos + 150, font_info, releaseCycle);
 	
 	// svn/git built date
 	ypos += iheight;
@@ -207,65 +207,65 @@
 #else
 	paintLine(xpos    , font_info, GIT_REV);
 #endif
-	paintLine(xpos + 125, font_info, builddate );	
+	paintLine(xpos + 150, font_info, builddate );	
 	
 	// image type
 	ypos += iheight;
 	paintLine(xpos    , font_info, g_Locale->getText(LOCALE_IMAGEINFO_TYPE));
-	paintLine(xpos + 125, font_info, imageType);
+	paintLine(xpos + 150, font_info, imageType);
 
 	// image creator
 	ypos += iheight;
 	paintLine(xpos    , font_info, g_Locale->getText(LOCALE_IMAGEINFO_CREATOR));
-	paintLine(xpos + 125, font_info, creator);
+	paintLine(xpos + 150, font_info, creator);
 
 	// homepage
 	ypos += iheight;
 	paintLine(xpos    , font_info, g_Locale->getText(LOCALE_IMAGEINFO_HOMEPAGE));
-	paintLine(xpos + 125, font_info, homepage);
+	paintLine(xpos + 150, font_info, homepage);
 
 	/* doko */
 	ypos += iheight;
 	paintLine(xpos    , font_info, g_Locale->getText(LOCALE_IMAGEINFO_DOKUMENTATION));
-	paintLine(xpos + 125, font_info, docs);
+	paintLine(xpos + 150, font_info, docs);
 
 	// forum
 	ypos += iheight;
 	paintLine(xpos    , font_info, g_Locale->getText(LOCALE_IMAGEINFO_FORUM));
-	paintLine(xpos + 125, font_info, forum);
+	paintLine(xpos + 150, font_info, forum);
 
 	// license
 	ypos += iheight;
 	paintLine(xpos, font_info,g_Locale->getText(LOCALE_IMAGEINFO_LICENSE));
-	paintLine(xpos + 125, font_small, "This program is free software; you can redistribute it and/or modify");
+	paintLine(xpos + 150, font_small, "This program is free software; you can redistribute it and/or modify");
 
 	ypos += sheight;
-	paintLine(xpos + 125, font_small, "it under the terms of the GNU General Public License as published by");
+	paintLine(xpos + 150, font_small, "it under the terms of the GNU General Public License as published by");
 
 	ypos += sheight;
-	paintLine(xpos + 125, font_small, "the Free Software Foundation; either version 2 of the License, or");
+	paintLine(xpos + 150, font_small, "the Free Software Foundation; either version 2 of the License, or");
 
 	ypos += sheight;
-	paintLine(xpos + 125, font_small, "(at your option) any later version.");
+	paintLine(xpos + 150, font_small, "(at your option) any later version.");
 
 	ypos += sheight;
-	paintLine(xpos + 125, font_small, "This program is distributed in the hope that it will be useful,");
+	paintLine(xpos + 150, font_small, "This program is distributed in the hope that it will be useful,");
 
 	ypos += sheight;
-	paintLine(xpos + 125, font_small, "but WITHOUT ANY WARRANTY; without even the implied warranty of");
+	paintLine(xpos + 150, font_small, "but WITHOUT ANY WARRANTY; without even the implied warranty of");
 
 	ypos += sheight;
-	paintLine(xpos + 125, font_small, "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.");
+	paintLine(xpos + 150, font_small, "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.");
 
 	ypos += sheight;
-	paintLine(xpos + 125, font_small, "See the GNU General Public License for more details.");
+	paintLine(xpos + 150, font_small, "See the GNU General Public License for more details.");
 
 	ypos += sheight;
-	paintLine(xpos + 125, font_small, "You should have received a copy of the GNU General Public License");
+	paintLine(xpos + 150, font_small, "You should have received a copy of the GNU General Public License");
 
 	ypos += sheight;
-	paintLine(xpos + 125, font_small, "along with this program; if not, write to the Free Software");
+	paintLine(xpos + 150, font_small, "along with this program; if not, write to the Free Software");
 
 	ypos += sheight;
-	paintLine(xpos + 125, font_small, "Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.");	
+	paintLine(xpos + 150, font_small, "Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.");	
 }
diff -Naur nhd2-exp.orig/src/gui/infoviewer.cpp nhd2-exp/src/gui/infoviewer.cpp
--- nhd2-exp.orig/src/gui/infoviewer.cpp	2014-12-29 21:40:23.000000000 +0100
+++ nhd2-exp/src/gui/infoviewer.cpp	2014-12-29 21:43:34.000000000 +0100
@@ -138,7 +138,8 @@
 #define CHANNUMBER_WIDTH	100
 
 // logo
-#define CHANNEL_LOGO_HEIGHT	40
+#define CHANNEL_LOGO_HEIGHT	50
+#define CHANNEL_LOGO_WIDTH	125
 
 // infoboxheight
 #define BOXHEIGHT_CHANNELINFO	140
@@ -216,11 +217,11 @@
 	buttonBarStartY = BoxStartY + BoxHeight;
 	
 	// channel logo
-	PIC_X = BoxStartX + CHANNUMBER_WIDTH + 10;
-	PIC_Y = BoxStartY + SAT_INFOBOX_HEIGHT + TIMESCALE_BAR_HEIGHT + 5;
+	PIC_X = BoxStartX + 15;
+	PIC_Y = (BoxStartY + (BoxHeight - CHANNEL_LOGO_HEIGHT) / 2) + 40;
 	
 	// channel number
-	ChanNumberX = BoxStartX + 10;
+	ChanNumberX = BoxStartX + 30;
 	ChanNumberY = BoxStartY + SAT_INFOBOX_HEIGHT + TIMESCALE_BAR_HEIGHT + 5;
 	
 	// channel name
@@ -228,12 +229,12 @@
 	ChanNameY = BoxStartY + SAT_INFOBOX_HEIGHT + TIMESCALE_BAR_HEIGHT + 5;
 	
 	// channel logo
-	PIC_W = CHANNEL_LOGO_HEIGHT*1.67;
-	PIC_H = CHANNEL_LOGO_HEIGHT;
+	PIC_W = CHANNEL_LOGO_WIDTH;
+ 	PIC_H = CHANNEL_LOGO_HEIGHT;
 	
 	// channel info
 	ChanInfoX = BoxStartX + CHANNUMBER_WIDTH + 10;
-	ChanInfoY = BoxStartY + SAT_INFOBOX_HEIGHT + TIMESCALE_BAR_HEIGHT + 5 + CHANNEL_LOGO_HEIGHT + 3; //PIC_Y + CHANNEL_LOGO_HEIGHT + 5
+	ChanInfoY = BoxStartY + SAT_INFOBOX_HEIGHT + TIMESCALE_BAR_HEIGHT - 5 + CHANNEL_LOGO_HEIGHT + 3; //PIC_Y + CHANNEL_LOGO_HEIGHT + 5
 	ChanInfoHeight = std::max(CHANINFO_HEIGHT, (g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->getHeight() > CHANINFO_HEIGHT)? CHANINFO_HEIGHT : g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->getHeight());
 
 	// button cell width
@@ -379,11 +380,11 @@
 	buttonBarStartY = BoxStartY + BoxHeight;
 	
 	// channel logo
-	PIC_X = BoxStartX + CHANNUMBER_WIDTH + 10;
-	PIC_Y = BoxStartY + SAT_INFOBOX_HEIGHT + TIMESCALE_BAR_HEIGHT + 5;
+	PIC_X = BoxStartX + 15;
+	PIC_Y = (BoxStartY + (BoxHeight - CHANNEL_LOGO_HEIGHT) / 2) + 40;
 	
 	// channel number
-	ChanNumberX = BoxStartX + 10;
+	ChanNumberX = BoxStartX + 30;
 	ChanNumberY = BoxStartY + SAT_INFOBOX_HEIGHT + TIMESCALE_BAR_HEIGHT + 5;
 	
 	// channel name
@@ -392,7 +393,7 @@
 	
 	// channel info
 	ChanInfoX = BoxStartX + CHANNUMBER_WIDTH + 10;
-	ChanInfoY = BoxStartY + SAT_INFOBOX_HEIGHT + TIMESCALE_BAR_HEIGHT + 5 + CHANNEL_LOGO_HEIGHT + 3;
+	ChanInfoY = BoxStartY + SAT_INFOBOX_HEIGHT + TIMESCALE_BAR_HEIGHT - 5 + CHANNEL_LOGO_HEIGHT + 3;
 	//ChanInfoHeight = g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->getHeight();
 	ChanInfoHeight = std::max(CHANINFO_HEIGHT, (g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->getHeight() > CHANINFO_HEIGHT)? CHANINFO_HEIGHT : g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->getHeight());
 	
@@ -525,11 +526,11 @@
 			g_PicViewer->DisplayLogo(channel_id, PIC_X, PIC_Y, (logo_bpp == 4 && !g_settings.show_channelname)? logo_w : PIC_W, PIC_H, (logo_h > PIC_H)? true : false, false, true);
 
 			// recalculate ChanNameWidth
-			ChanNameWidth = BoxWidth - (time_width + CHANNUMBER_WIDTH + logo_w + g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_CHANNAME]->getRenderWidth(ChannelName, true));
+			//ChanNameWidth = BoxWidth - (time_width + CHANNUMBER_WIDTH + logo_w + g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_CHANNAME]->getRenderWidth(ChannelName, true));
 			
 			// ChannelName
 			if(g_settings.show_channelname)
-				g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_CHANNAME]->RenderString(PIC_X + ((logo_bpp == 4)? logo_w : PIC_W) + 10, ChanNameY + time_height, ChanNameWidth, ChannelName, COL_INFOBAR, 0, true);	// UTF-8
+				g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_CHANNAME]->RenderString( BoxStartX + CHANNUMBER_WIDTH + 10, ChanNameY + time_height, ChanNameWidth, ChannelName, COL_INFOBAR, 0, true);	// UTF-8
 		}
 		else
 		{
@@ -2020,83 +2021,170 @@
 				g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL]->RenderString(BoxStartX + 5 + icon_red_w + 5, buttonBarStartY + (buttonBarHeight - g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL]->getHeight())/2 + g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL]->getHeight(), asize - 5, g_Locale->getText(LOCALE_INFOVIEWER_EVENTLIST), COL_INFOBAR_BUTTONS, 0, true); // UTF-8
 	  		}
 		}
-
-		// paint epg infos
-		if ((info_CurrentNext.flags & CSectionsdClient::epgflags::not_broadcast) || ((calledFromEvent) && !(info_CurrentNext.flags & (CSectionsdClient::epgflags::has_next | CSectionsdClient::epgflags::has_current)))) 
+		// check logo
+		logo_w = PIC_W;
+		logo_h = PIC_H;
+		logo_bpp = 0;
+		bool logo_ok = false;
+		logo_ok = g_PicViewer->checkLogo(channel_id);
+		if(logo_ok)
 		{
-	  		// no EPG available	
-			// refresh box
-	  		frameBuffer->paintBox(/*ChanInfoX + 10*/BoxStartX, ChanInfoY + CHANINFO_HEIGHT, BoxEndX, ChanInfoY + 2*ChanInfoHeight, COL_INFOBAR_PLUS_0);
+			// paint epg infos
+			if ((info_CurrentNext.flags & CSectionsdClient::epgflags::not_broadcast) || ((calledFromEvent) && !(info_CurrentNext.flags & (CSectionsdClient::epgflags::has_next | CSectionsdClient::epgflags::has_current)))) 
+			{
+		  		// no EPG available	
+				// refresh box
+		  		frameBuffer->paintBox(BoxStartX + 100, ChanInfoY + CHANINFO_HEIGHT, BoxEndX, ChanInfoY + 2*ChanInfoHeight, COL_INFOBAR_PLUS_0);
 			
-			// noepg/waiting for time
-	  		g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString(ChanInfoX, ChanInfoY + 2*ChanInfoHeight, BoxEndX - (BoxStartX + CHANNUMBER_WIDTH + 20), g_Locale->getText (gotTime ? LOCALE_INFOVIEWER_NOEPG : LOCALE_INFOVIEWER_WAITTIME), COL_INFOBAR, 0, true);	// UTF-8
-		} 
-		else 
-		{
-	  		// found some epg
-	  		int duration1Width = g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->getRenderWidth(runningRest);
-	  		int duration1TextPos = BoxEndX - duration1Width - BORDER_RIGHT;
+				// noepg/waiting for time
+		  		g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString(ChanInfoX + 100, ChanInfoY + 2*ChanInfoHeight, BoxEndX - (BoxStartX + CHANNUMBER_WIDTH + 20), g_Locale->getText (gotTime ? LOCALE_INFOVIEWER_NOEPG : LOCALE_INFOVIEWER_WAITTIME), COL_INFOBAR, 0, true);	// UTF-8
+			} 
+			else 
+			{
+		  		// found some epg
+		  		int duration1Width = g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->getRenderWidth(runningRest);
+		  		int duration1TextPos = BoxEndX - duration1Width - BORDER_RIGHT;
 
-	  		int duration2Width = g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->getRenderWidth(nextDuration);
-	  		int duration2TextPos = BoxEndX - duration2Width - BORDER_RIGHT;
+		  		int duration2Width = g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->getRenderWidth(nextDuration);
+		  		int duration2TextPos = BoxEndX - duration2Width - BORDER_RIGHT;
 
-	  		if ((info_CurrentNext.flags & CSectionsdClient::epgflags::has_next) && (!(info_CurrentNext.flags & CSectionsdClient::epgflags::has_current))) 
-			{
-				// there are later events available - yet no current
-				//refresh box current
-				frameBuffer->paintBox(/*ChanInfoX + 10*/BoxStartX, ChanInfoY, BoxEndX, ChanInfoY + CHANINFO_HEIGHT, COL_INFOBAR_PLUS_0);
+		  		if ((info_CurrentNext.flags & CSectionsdClient::epgflags::has_next) && (!(info_CurrentNext.flags & CSectionsdClient::epgflags::has_current))) 
+				{
+					// there are later events available - yet no current
+					//refresh box current
+					frameBuffer->paintBox(BoxStartX + 100, ChanInfoY, BoxEndX, ChanInfoY + CHANINFO_HEIGHT, COL_INFOBAR_PLUS_0);
 				
-				// current infos
-				g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (ChanInfoX, ChanInfoY + ChanInfoHeight, BoxEndX - ChanInfoX, g_Locale->getText(LOCALE_INFOVIEWER_NOCURRENT), COL_COLORED_EVENTS_INFOBAR, 0, true);	// UTF-8
+					// current infos
+					g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (ChanInfoX, ChanInfoY + ChanInfoHeight, BoxEndX - ChanInfoX, g_Locale->getText(LOCALE_INFOVIEWER_NOCURRENT), COL_COLORED_EVENTS_INFOBAR, 0, true);	// UTF-8
 
-				// next
-				if(last_next_id != info_CurrentNext.next_uniqueKey) 
-				{
-					// refresh box
-					frameBuffer->paintBox(BoxStartX /*+ 10*/, ChanInfoY + CHANINFO_HEIGHT, BoxEndX, ChanInfoY + 2*ChanInfoHeight, COL_INFOBAR_PLUS_0);
+					// next
+					if(last_next_id != info_CurrentNext.next_uniqueKey) 
+					{
+						// refresh box
+						frameBuffer->paintBox(BoxStartX + 100, ChanInfoY + CHANINFO_HEIGHT, BoxEndX, ChanInfoY + 2*ChanInfoHeight, COL_INFOBAR_PLUS_0);
 
-					g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString(BoxStartX + 10, ChanInfoY + 2*ChanInfoHeight, EPGTimeWidth, nextStart, COL_INFOBAR );
-					g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString(ChanInfoX, ChanInfoY + 2*ChanInfoHeight, duration2TextPos - ChanInfoX - 5, info_CurrentNext.next_name, COL_INFOBAR, 0, true);
-					g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString(duration2TextPos, ChanInfoY + 2*ChanInfoHeight, duration2Width, nextDuration, COL_INFOBAR );
+						g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString(BoxStartX + 110, ChanInfoY + 2*ChanInfoHeight, EPGTimeWidth, nextStart, COL_INFOBAR );
+						g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString(ChanInfoX + 100, ChanInfoY + 2*ChanInfoHeight, duration2TextPos - ChanInfoX - 105, info_CurrentNext.next_name, COL_INFOBAR, 0, true);
+						g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString(duration2TextPos, ChanInfoY + 2*ChanInfoHeight, duration2Width, nextDuration, COL_INFOBAR );
 
-					last_next_id = info_CurrentNext.next_uniqueKey;
-				}
-	  		} 
-			else 
-			{
-				// current
-		  		if(last_curr_id != info_CurrentNext.current_uniqueKey) 
+						last_next_id = info_CurrentNext.next_uniqueKey;
+					}
+		  		} 
+				else 
 				{
-					// refresh box
-			  		frameBuffer->paintBox(BoxStartX /*+ 10*/, ChanInfoY, BoxEndX, ChanInfoY + CHANINFO_HEIGHT, COL_INFOBAR_PLUS_0);
+					// current
+			  		if(last_curr_id != info_CurrentNext.current_uniqueKey) 
+					{
+						// refresh box
+				  		frameBuffer->paintBox(BoxStartX + 100, ChanInfoY, BoxEndX - 100, ChanInfoY + CHANINFO_HEIGHT, COL_INFOBAR_PLUS_0);
 					
-			  		g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (BoxStartX + 10, ChanInfoY + ChanInfoHeight, EPGTimeWidth, runningStart, COL_COLORED_EVENTS_INFOBAR);
-			  		g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (ChanInfoX, ChanInfoY + ChanInfoHeight, duration1TextPos - ChanInfoX - 5, info_CurrentNext.current_name, COL_COLORED_EVENTS_INFOBAR, 0, true);
+				  		g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (BoxStartX + 110, ChanInfoY + ChanInfoHeight, EPGTimeWidth, runningStart, COL_COLORED_EVENTS_INFOBAR);
+				  		g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (ChanInfoX + 100, ChanInfoY + ChanInfoHeight, duration1TextPos - ChanInfoX - 105, info_CurrentNext.current_name, COL_COLORED_EVENTS_INFOBAR, 0, true);
+
+				  		last_curr_id = info_CurrentNext.current_uniqueKey;
+			  		}
+			  		
+			  		// refresh box
+			  		frameBuffer->paintBox(BoxEndX - 80, ChanInfoY, BoxEndX, ChanInfoY + CHANINFO_HEIGHT, COL_INFOBAR_PLUS_0);//FIXME duration1TextPos not really good
+			  		g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (duration1TextPos, ChanInfoY + ChanInfoHeight, duration1Width, runningRest, COL_INFOBAR);
+
+					// next 
+					if ((!is_nvod) && (info_CurrentNext.flags & CSectionsdClient::epgflags::has_next)) 
+					{
+						if(last_next_id != info_CurrentNext.next_uniqueKey) 
+						{
+							// refresh
+							frameBuffer->paintBox(BoxStartX + 100, ChanInfoY + CHANINFO_HEIGHT, BoxEndX, ChanInfoY + 2*ChanInfoHeight, COL_INFOBAR_PLUS_0);
 
-			  		last_curr_id = info_CurrentNext.current_uniqueKey;
+							g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (BoxStartX + 110, ChanInfoY + 2*ChanInfoHeight, EPGTimeWidth, nextStart, COL_INFOBAR);
+							g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (ChanInfoX + 100, ChanInfoY + 2*ChanInfoHeight, duration2TextPos - ChanInfoX - 105, info_CurrentNext.next_name, COL_INFOBAR, 0, true);
+							g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (duration2TextPos, ChanInfoY + 2*ChanInfoHeight, duration2Width, nextDuration, COL_INFOBAR );
+
+							last_next_id = info_CurrentNext.next_uniqueKey;
+						}
+					} 
 		  		}
-		  		
-		  		// refresh box
-		  		frameBuffer->paintBox(BoxEndX - 80, ChanInfoY, BoxEndX, ChanInfoY + CHANINFO_HEIGHT, COL_INFOBAR_PLUS_0);//FIXME duration1TextPos not really good
-		  		g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (duration1TextPos, ChanInfoY + ChanInfoHeight, duration1Width, runningRest, COL_INFOBAR);
+			}
+		}
+		else
+		{
+			// paint epg infos
+			if ((info_CurrentNext.flags & CSectionsdClient::epgflags::not_broadcast) || ((calledFromEvent) && !(info_CurrentNext.flags & (CSectionsdClient::epgflags::has_next | CSectionsdClient::epgflags::has_current)))) 
+			{
+		  		// no EPG available	
+				// refresh box
+		  		frameBuffer->paintBox(/*ChanInfoX + 10*/BoxStartX, ChanInfoY + CHANINFO_HEIGHT, BoxEndX, ChanInfoY + 2*ChanInfoHeight, COL_INFOBAR_PLUS_0);
+			
+				// noepg/waiting for time
+		  		g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString(ChanInfoX, ChanInfoY + 2*ChanInfoHeight, BoxEndX - (BoxStartX + CHANNUMBER_WIDTH + 20), g_Locale->getText (gotTime ? LOCALE_INFOVIEWER_NOEPG : LOCALE_INFOVIEWER_WAITTIME), COL_INFOBAR, 0, true);	// UTF-8
+			} 
+			else 
+			{
+		  		// found some epg
+		  		int duration1Width = g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->getRenderWidth(runningRest);
+		  		int duration1TextPos = BoxEndX - duration1Width - BORDER_RIGHT;
+
+		  		int duration2Width = g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->getRenderWidth(nextDuration);
+		  		int duration2TextPos = BoxEndX - duration2Width - BORDER_RIGHT;
 
-				// next 
-				if ((!is_nvod) && (info_CurrentNext.flags & CSectionsdClient::epgflags::has_next)) 
+		  		if ((info_CurrentNext.flags & CSectionsdClient::epgflags::has_next) && (!(info_CurrentNext.flags & CSectionsdClient::epgflags::has_current))) 
 				{
+					// there are later events available - yet no current
+					//refresh box current
+					frameBuffer->paintBox(/*ChanInfoX + 10*/BoxStartX, ChanInfoY, BoxEndX, ChanInfoY + CHANINFO_HEIGHT, COL_INFOBAR_PLUS_0);
+				
+					// current infos
+					g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (ChanInfoX, ChanInfoY + ChanInfoHeight, BoxEndX - ChanInfoX, g_Locale->getText(LOCALE_INFOVIEWER_NOCURRENT), COL_COLORED_EVENTS_INFOBAR, 0, true);	// UTF-8
+
+					// next
 					if(last_next_id != info_CurrentNext.next_uniqueKey) 
 					{
-						// refresh
+						// refresh box
 						frameBuffer->paintBox(BoxStartX /*+ 10*/, ChanInfoY + CHANINFO_HEIGHT, BoxEndX, ChanInfoY + 2*ChanInfoHeight, COL_INFOBAR_PLUS_0);
 
-						g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (BoxStartX + 10, ChanInfoY + 2*ChanInfoHeight, EPGTimeWidth, nextStart, COL_INFOBAR);
-						g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (ChanInfoX, ChanInfoY + 2*ChanInfoHeight, duration2TextPos - ChanInfoX - 5, info_CurrentNext.next_name, COL_INFOBAR, 0, true);
-						g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (duration2TextPos, ChanInfoY + 2*ChanInfoHeight, duration2Width, nextDuration, COL_INFOBAR );
+						g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString(BoxStartX + 10, ChanInfoY + 2*ChanInfoHeight, EPGTimeWidth, nextStart, COL_INFOBAR );
+						g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString(ChanInfoX, ChanInfoY + 2*ChanInfoHeight, duration2TextPos - ChanInfoX - 5, info_CurrentNext.next_name, COL_INFOBAR, 0, true);
+						g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString(duration2TextPos, ChanInfoY + 2*ChanInfoHeight, duration2Width, nextDuration, COL_INFOBAR );
 
 						last_next_id = info_CurrentNext.next_uniqueKey;
 					}
-				} 
-	  		}
-		}
+		  		} 
+				else 
+				{
+					// current
+			  		if(last_curr_id != info_CurrentNext.current_uniqueKey) 
+					{
+						// refresh box
+				  		frameBuffer->paintBox(BoxStartX /*+ 10*/, ChanInfoY, BoxEndX, ChanInfoY + CHANINFO_HEIGHT, COL_INFOBAR_PLUS_0);
+					
+				  		g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (BoxStartX + 10, ChanInfoY + ChanInfoHeight, EPGTimeWidth, runningStart, COL_COLORED_EVENTS_INFOBAR);
+				  		g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (ChanInfoX, ChanInfoY + ChanInfoHeight, duration1TextPos - ChanInfoX - 5, info_CurrentNext.current_name, COL_COLORED_EVENTS_INFOBAR, 0, true);
+
+				  		last_curr_id = info_CurrentNext.current_uniqueKey;
+			  		}
+			  		
+			  		// refresh box
+			  		frameBuffer->paintBox(BoxEndX - 80, ChanInfoY, BoxEndX, ChanInfoY + CHANINFO_HEIGHT, COL_INFOBAR_PLUS_0);//FIXME duration1TextPos not really good
+			  		g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (duration1TextPos, ChanInfoY + ChanInfoHeight, duration1Width, runningRest, COL_INFOBAR);
+
+					// next 
+					if ((!is_nvod) && (info_CurrentNext.flags & CSectionsdClient::epgflags::has_next)) 
+					{
+						if(last_next_id != info_CurrentNext.next_uniqueKey) 
+						{
+							// refresh
+							frameBuffer->paintBox(BoxStartX /*+ 10*/, ChanInfoY + CHANINFO_HEIGHT, BoxEndX, ChanInfoY + 2*ChanInfoHeight, COL_INFOBAR_PLUS_0);
+
+							g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (BoxStartX + 10, ChanInfoY + 2*ChanInfoHeight, EPGTimeWidth, nextStart, COL_INFOBAR);
+							g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (ChanInfoX, ChanInfoY + 2*ChanInfoHeight, duration2TextPos - ChanInfoX - 5, info_CurrentNext.next_name, COL_INFOBAR, 0, true);
+							g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_INFO]->RenderString (duration2TextPos, ChanInfoY + 2*ChanInfoHeight, duration2Width, nextDuration, COL_INFOBAR );
+
+							last_next_id = info_CurrentNext.next_uniqueKey;
+						}
+					} 
+		  		}
+			}
+		}//Grabber66
   	}
 }
 
diff -Naur nhd2-exp.orig/src/gui/upnpbrowser.cpp nhd2-exp/src/gui/upnpbrowser.cpp
--- nhd2-exp.orig/src/gui/upnpbrowser.cpp	1970-01-01 01:00:00.000000000 +0100
+++ nhd2-exp/src/gui/upnpbrowser.cpp	2014-12-29 21:48:35.000000000 +0100
@@ -0,0 +1,1308 @@
+/*
+  Neutrino-GUI  -   DBoxII-Project
+
+  UPnP Browser (c) 2007 by Jochen Friedrich
+
+  Homepage: http://dbox.cyberphoria.org/
+
+  Kommentar:
+
+  Diese GUI wurde von Grund auf neu programmiert und sollte nun vom
+  Aufbau und auch den Ausbaumoeglichkeiten gut aussehen. Neutrino basiert
+  auf der Client-Server Idee, diese GUI ist also von der direkten DBox-
+  Steuerung getrennt. Diese wird dann von Daemons uebernommen.
+
+
+  License: GPL
+
+  This program is free software; you can redistribute it and/or modify
+  it under the terms of the GNU General Public License as published by
+  the Free Software Foundation; either version 2 of the License, or
+  (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+*/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <sstream>
+#include <stdexcept>
+
+#include <gui/upnpbrowser.h>
+
+#include <global.h>
+#include <neutrino.h>
+#include <xmltree.h>
+#include <upnpclient.h>
+
+#include <driver/encoding.h>
+#include <driver/fontrenderer.h>
+#include <driver/rcinput.h>
+#include <driver/audioplay.h>
+#include <driver/audiofile.h>
+#include <driver/audiometadata.h>
+
+#include <daemonc/remotecontrol.h>
+
+#include <gui/eventlist.h>
+#include <gui/color.h>
+#include <gui/infoviewer.h>
+
+#include <gui/widget/buttons.h>
+#include <gui/widget/icons.h>
+#include <gui/widget/menue.h>
+#include <gui/widget/messagebox.h>
+#include <gui/widget/hintbox.h>
+#include <gui/widget/stringinput.h>
+#include <gui/widget/stringinput_ext.h>
+
+#include <system/settings.h>
+#include <gui/pictureviewer.h>
+#include <gui/movieplayer.h>
+#include <gui/webtv.h>
+
+
+#ifdef ConnectLineBox_Width
+#undef ConnectLineBox_Width
+#endif
+#define ConnectLineBox_Width    15
+
+extern CPictureViewer * g_PicViewer;
+extern CMoviePlayerGui * moviePlayerGui;	// defined in neutrino.cpp
+extern CWebTV * webtv;
+
+const struct button_label RescanButton = {NEUTRINO_ICON_BUTTON_BLUE  , LOCALE_UPNPBROWSER_RESCAN};
+const struct button_label StopButton   = {NEUTRINO_ICON_BUTTON_RED, LOCALE_AUDIOPLAYER_STOP};
+const struct button_label PUpButton    = {NEUTRINO_ICON_BUTTON_GREEN, LOCALE_FILEBROWSER_NEXTPAGE};
+const struct button_label PDownButton  = {NEUTRINO_ICON_BUTTON_YELLOW, LOCALE_FILEBROWSER_PREVPAGE};
+
+
+CUpnpBrowserGui::CUpnpBrowserGui()
+{
+	m_socket = new CUPnPSocket();
+	m_frameBuffer = CFrameBuffer::getInstance();
+	m_playing_entry_is_shown = false;
+}
+
+CUpnpBrowserGui::~CUpnpBrowserGui()
+{
+	delete m_socket;
+}
+
+int CUpnpBrowserGui::exec(CMenuTarget* parent, const std::string & /*actionKey*/)
+{
+
+	CAudioPlayer::getInstance()->init();
+
+	if(parent)
+		parent->hide();
+
+	// tell neutrino we're in audio mode
+	CNeutrinoApp::getInstance()->handleMsg( NeutrinoMessages::CHANGEMODE , NeutrinoMessages::mode_audio);
+	
+	// remember last mode
+	m_LastMode = (CNeutrinoApp::getInstance()->getLastMode());
+
+	m_width = (g_settings.screen_EndX - g_settings.screen_StartX) - ConnectLineBox_Width;
+	m_height = (g_settings.screen_EndY - g_settings.screen_StartY);
+	
+	m_frameBuffer->getIconSize(NEUTRINO_ICON_UPNP, &icon_head_w, &icon_head_h);
+
+	m_sheight = g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL]->getHeight();
+	m_frameBuffer->getIconSize(NEUTRINO_ICON_BUTTON_OKAY, &icon_foot_w, &icon_foot_h);
+	m_buttonHeight = std::max(icon_foot_h, m_sheight) + 6;
+	m_theight = g_Font[SNeutrinoSettings::FONT_TYPE_MENU_TITLE]->getHeight();
+	m_mheight = g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->getHeight();
+	m_fheight = g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->getHeight();
+	m_title_height = m_mheight*2 + 20 + m_sheight + 4;
+	m_info_height = m_mheight*2;
+	m_listmaxshow = (m_height - m_info_height - m_title_height - m_theight - 2*m_buttonHeight) / (m_fheight);
+	m_height = m_theight + m_info_height + m_title_height + 2*m_buttonHeight + m_listmaxshow * m_fheight; // recalc height
+
+	m_x = (((g_settings.screen_EndX - g_settings.screen_StartX) - (m_width + ConnectLineBox_Width)) / 2) + g_settings.screen_StartX + ConnectLineBox_Width;
+	m_y = (((g_settings.screen_EndY- g_settings.screen_StartY) - m_height)/ 2) + g_settings.screen_StartY;
+
+	//
+	if(CNeutrinoApp::getInstance()->getLastMode() == NeutrinoMessages::mode_iptv)
+	{
+		if(webtv)
+			webtv->stopPlayBack();
+	}
+	else
+	{
+		// stop playback
+		g_Zapit->lockPlayBack();
+		
+		// Stop sectionsd
+		g_Sectionsd->setPauseScanning(true);
+	}
+
+	m_indexdevice = 0;
+	m_selecteddevice = 0;
+
+	selectDevice();
+
+	//
+	if(CAudioPlayer::getInstance()->getState() != CBaseDec::STOP)
+		CAudioPlayer::getInstance()->stop();
+	
+	//
+	if(CNeutrinoApp::getInstance()->getLastMode() == NeutrinoMessages::mode_iptv)
+	{
+		if(webtv)
+			webtv->startPlayBack(webtv->getTunedChannel());
+	}
+	else
+	{
+		// start playback
+		g_Zapit->unlockPlayBack();
+
+		// Start Sectionsd
+		g_Sectionsd->setPauseScanning(false);
+	}
+
+	CNeutrinoApp::getInstance()->handleMsg( NeutrinoMessages::CHANGEMODE , m_LastMode );
+	g_RCInput->postMsg( NeutrinoMessages::SHOW_INFOBAR, 0 );
+
+	// always repaint
+	return menu_return::RETURN_REPAINT;
+}
+
+void CUpnpBrowserGui::splitProtocol(std::string &protocol, std::string &prot, std::string &network, std::string &mime, std::string &additional)
+{
+	std::string::size_type pos;
+	std::string::size_type startpos = 0;
+
+	pos = protocol.find(":", startpos);
+	if (pos != std::string::npos)
+	{
+		prot = protocol.substr(startpos, pos-startpos);
+		startpos = pos + 1;
+
+		pos = protocol.find(":", startpos);
+		if (pos != std::string::npos)
+		{
+			network = protocol.substr(startpos, pos-startpos);
+			startpos = pos + 1;
+
+			pos = protocol.find(":", startpos);
+			if (pos != std::string::npos)
+			{
+				mime = protocol.substr(startpos, pos-startpos);
+				startpos = pos + 1;
+
+				pos = protocol.find(":", startpos);
+				if (pos != std::string::npos)
+				{
+					additional = protocol.substr(startpos, pos-startpos);
+				}
+			}
+		}
+	}
+	//printf("%s -> %s - %s - %s - %s\n", protocol.c_str(), prot.c_str(), network.c_str(), mime.c_str(), additional.c_str());
+}
+
+std::vector<UPnPEntry> *CUpnpBrowserGui::decodeResult(std::string result)
+{
+	XMLTreeParser * parser;
+	XMLTreeNode   * root, * node, * snode;
+	std::vector<UPnPEntry> * entries;
+
+	parser = new XMLTreeParser("UTF-8");
+	parser->Parse(result.c_str(), result.size(), 1);
+	root=parser->RootNode();
+	if (!root){
+		delete parser;
+		return NULL;
+	}
+	entries = new std::vector<UPnPEntry>;
+
+	for (node = root->GetChild(); node; node = node->GetNext())
+	{
+		bool isdir;
+		std::string title, artist = "", album = "", id, children;
+		char *type, *p;
+
+		if (!strcmp(node->GetType(), "container"))
+		{
+			std::vector<UPnPResource> resources;
+			isdir=true;
+			for (snode=node->GetChild(); snode; snode=snode->GetNext())
+			{
+				type=snode->GetType();
+				p = strchr(type,':');
+				if (p)
+					type=p+1;
+				if (!strcmp(type,"title"))
+				{
+					p=snode->GetData();
+					if (!p)
+						p=(char *) "";
+					title=std::string(p);
+				}
+			}
+			p = node->GetAttributeValue((char *) "id");
+			if (!p)
+				p=(char *) "";
+			id=std::string(p);
+
+			p = node->GetAttributeValue((char *) "childCount");
+			if (!p)
+				p=(char *) "";
+			children=std::string(p);
+
+			UPnPEntry entry={id, isdir, title, artist, album, children, resources, -1};
+			entries->push_back(entry);
+		}
+		
+		if (!strcmp(node->GetType(), "item"))
+		{
+			std::vector<UPnPResource> resources;
+			int preferred = -1;
+			std::string protocol, prot, network, mime, additional;
+			isdir=false;
+			for (snode=node->GetChild(); snode; snode=snode->GetNext())
+			{
+				std::string duration, url, size;
+				unsigned int i;
+				type=snode->GetType();
+				p = strchr(type,':');
+				if (p)
+					type=p+1;
+
+				if (!strcmp(type,"title"))
+				{
+					p=snode->GetData();
+					if (!p)
+						p=(char *) "";
+					title=std::string(p);
+				}
+				else if (!strcmp(type,"artist"))
+				{
+					p=snode->GetData();
+					if (!p)
+						p=(char *) "";
+					artist=std::string(p);
+				}
+				else if (!strcmp(type,"album"))
+				{
+					p=snode->GetData();
+					if (!p)
+						p=(char *) "";
+					album=std::string(p);
+				}
+				else if (!strcmp(type,"res"))
+				{
+					p = snode->GetData();
+					if (!p)
+						p=(char *) "";
+					url=std::string(p);
+					p = snode->GetAttributeValue((char *) "size");
+					if (!p)
+						p=(char *) "0";
+					size=std::string(p);
+					p = snode->GetAttributeValue((char *) "duration");
+					if (!p)
+						p=(char *) "";
+					duration=std::string(p);
+					p = snode->GetAttributeValue((char *) "protocolInfo");
+					if (!p)
+						p=(char *) "";
+					protocol=std::string(p);
+					UPnPResource resource = {url, protocol, size, duration};
+					resources.push_back(resource);
+				}
+				int pref=0;
+				preferred = -1;
+				
+				for (i = 0; i < resources.size(); i++)
+				{
+					protocol = resources[i].protocol;
+					splitProtocol(protocol, prot, network, mime, additional);
+					if (prot != "http-get")
+						continue;
+					
+					if (mime == "image/jpeg" && pref < 1)
+					{
+						preferred = i;
+						pref = 1;
+					}
+					if (mime == "image/gif" && pref < 2)
+					{
+						preferred = i;
+						pref = 2;
+					}
+
+					if (mime == "audio/mpeg" && pref < 3)
+					{
+						preferred = i;
+						pref = 3;
+					}
+					
+					if (mime == "audio/x-vorbis+ogg" && pref < 4)
+					{
+						preferred=i;
+						pref = 4;
+					}
+					
+					//
+					if (mime.substr(0,6) == "video/" && pref < 5)
+					{
+						preferred = i;
+						pref = 5;
+					}
+					
+					if (mime == "video/x-flv" && pref < 6)
+					{
+						preferred=i;
+						pref = 6;
+					}
+					
+					if (mime == "video/mp4" && pref < 7)
+					{
+						preferred=i;
+						pref = 7;
+					}
+					//
+				}
+			}
+			p = node->GetAttributeValue((char *) "id");
+			if (!p)
+				p=(char *) "";
+			id=std::string(p);
+
+			p = node->GetAttributeValue((char *) "childCount");
+			if (!p)
+				p=(char *) "";
+			children=std::string(p);
+
+			UPnPEntry entry={id, isdir, title, artist, album, children, resources, preferred};
+
+			entries->push_back(entry);
+		}
+	}
+	delete parser;
+	return entries;
+}
+
+void CUpnpBrowserGui::selectDevice()
+{
+	bool loop = true;
+	bool changed = true;
+	neutrino_msg_t      msg;
+	neutrino_msg_data_t data;
+
+	CHintBox *scanBox = new CHintBox(LOCALE_MESSAGEBOX_INFO, g_Locale->getText(LOCALE_UPNPBROWSER_SCANNING)); // UTF-8
+	scanBox->paint();
+
+	m_devices = m_socket->Discover("urn:schemas-upnp-org:service:ContentDirectory:1");
+	scanBox->hide();
+
+	if (!m_devices.size())
+	{
+		ShowLocalizedMessage(LOCALE_MESSAGEBOX_INFO, LOCALE_UPNPBROWSER_NOSERVERS, CMessageBox::mbrBack, CMessageBox::mbBack, NEUTRINO_ICON_UPDATE);
+		delete scanBox;
+		return;
+	}	
+
+	// control loop
+	while (loop)
+	{
+		if (changed)
+		{
+			paintDevice();
+			changed = false;
+		}
+		
+		m_frameBuffer->blit();
+
+		g_RCInput->getMsg(&msg, &data, 10); // 1 sec timeout to update play/stop state display
+		neutrino_msg_t msg_repeatok = msg & ~CRCInput::RC_Repeat;
+
+		if( msg == CRCInput::RC_timeout)
+		{
+			// nothing
+		}
+		else if( msg == CRCInput::RC_home)
+		{
+			loop = false;
+		}
+		else if (msg_repeatok == CRCInput::RC_up && m_selecteddevice > 0)
+		{
+			m_selecteddevice--;
+			if (m_selecteddevice < m_indexdevice)
+				m_indexdevice -= m_listmaxshow;
+			changed = true;
+		}
+		else if (msg_repeatok == CRCInput::RC_down && m_selecteddevice + 1 < m_devices.size())
+		{
+			m_selecteddevice++;
+			if (m_selecteddevice + 1 > m_indexdevice + m_listmaxshow)
+				m_indexdevice += m_listmaxshow;
+			changed = true;
+		}
+		else if( msg == CRCInput::RC_right || msg == CRCInput::RC_ok)
+		{
+			m_folderplay = false;
+			selectItem("0");
+			changed = true;
+		}
+		else if( msg == CRCInput::RC_blue)
+		{
+			scanBox->paint();
+
+			m_devices = m_socket->Discover("urn:schemas-upnp-org:service:ContentDirectory:1");
+			scanBox->hide();
+			if (!m_devices.size())
+			{
+				ShowLocalizedMessage(LOCALE_MESSAGEBOX_INFO, LOCALE_UPNPBROWSER_NOSERVERS, CMessageBox::mbrBack, CMessageBox::mbBack, NEUTRINO_ICON_UPDATE);
+				delete scanBox;
+				return;
+			}
+			changed = true;
+		}
+		else if(msg == NeutrinoMessages::RECORD_START ||
+			msg == NeutrinoMessages::ZAPTO ||
+			msg == NeutrinoMessages::STANDBY_ON ||
+			msg == NeutrinoMessages::SHUTDOWN ||
+			msg == NeutrinoMessages::SLEEPTIMER)
+		{
+			loop = false;
+			g_RCInput->postMsg(msg, data);
+		}
+		else if(msg == NeutrinoMessages::EVT_TIMER)
+		{
+			CNeutrinoApp::getInstance()->handleMsg( msg, data );
+		}
+		else
+		{
+			if( CNeutrinoApp::getInstance()->handleMsg( msg, data ) & messages_return::cancel_all )
+				loop = false;
+			changed = true;
+		}
+	
+		m_frameBuffer->blit();	
+	}
+	
+	delete scanBox;
+	
+	m_frameBuffer->ClearFrameBuffer();
+	m_frameBuffer->blit();
+}
+
+void CUpnpBrowserGui::playnext(void)
+{
+	while (true)
+	{
+		std::list<UPnPAttribute>attribs;
+		std::list<UPnPAttribute>results;
+		std::list<UPnPAttribute>::iterator i;
+		std::stringstream sindex;
+		std::vector<UPnPEntry> *entries = NULL;
+		bool rfound = false;
+		bool nfound = false;
+		bool tfound = false;
+
+		sindex << m_playid;
+		attribs.push_back(UPnPAttribute("ObjectID", m_playfolder));
+		attribs.push_back(UPnPAttribute("BrowseFlag", "BrowseDirectChildren"));
+		attribs.push_back(UPnPAttribute("Filter", "*"));
+		attribs.push_back(UPnPAttribute("StartingIndex", sindex.str()));
+		attribs.push_back(UPnPAttribute("RequestedCount", "1"));
+		attribs.push_back(UPnPAttribute("SortCriteria", ""));
+
+		results=m_devices[m_selecteddevice].SendSOAP("urn:schemas-upnp-org:service:ContentDirectory:1", "Browse", attribs);
+		for (i = results.begin(); i!=results.end(); i++)
+		{
+			if (i->first=="NumberReturned")
+			{
+				if (atoi(i->second.c_str()) != 1)
+				{
+					m_folderplay = false;
+					return;
+				}
+				nfound=true;
+			}
+			
+			if (i->first=="TotalMatches")
+			{
+				tfound=true;
+			}
+			
+			if (i->first=="Result")
+			{
+				entries=decodeResult(i->second);
+				rfound=true;
+			}
+		}
+		m_playid++;
+		
+		if ((entries != NULL) && (!(*entries)[0].isdir))
+		{
+			int preferred=(*entries)[0].preferred;
+			if (preferred != -1)
+			{
+				std::string protocol, prot, network, mime, additional;
+				protocol=(*entries)[0].resources[preferred].protocol;
+				splitProtocol(protocol, prot, network, mime, additional);
+				
+				if (mime == "audio/mpeg")
+				{
+					m_playing_entry = (*entries)[0];
+					m_playing_entry_is_shown = false;
+					CAudiofile mp3((*entries)[0].resources[preferred].url, CFile::FILE_MP3);
+					CAudioPlayer::getInstance()->play(&mp3, g_settings.audioplayer_highprio == 1);
+					return;
+				}
+				else if (mime == "audio/x-vorbis+ogg")
+				{
+					m_playing_entry = (*entries)[0];
+					m_playing_entry_is_shown = false;
+					CAudiofile mp3((*entries)[0].resources[preferred].url, CFile::FILE_OGG);
+					CAudioPlayer::getInstance()->play(&mp3, g_settings.audioplayer_highprio == 1);
+					return;
+				}
+				#if 0
+				else if (mime.substr(0,6) == "video/")
+				{
+					// /*g_settings.streaming_server_url*/moviePlayerGui->filename = std::string((*entries)[0].resources[preferred].url); //FIXME
+					moviePlayerGui->filename = (*entries)[0].resources[preferred].url.c_str(); //FIXME
+					if (CAudioPlayer::getInstance()->getState() != CBaseDec::STOP)
+						CAudioPlayer::getInstance()->stop();
+					moviePlayerGui->exec(NULL, "urlplayback");
+					return;
+				}
+				else if (mime.substr(0,6) == "image/")
+				{
+					g_PicViewer->SetScaling((CFrameBuffer::ScalingMode)g_settings.picviewer_scaling);
+					g_PicViewer->SetVisible(g_settings.screen_StartX, g_settings.screen_EndX, g_settings.screen_StartY, g_settings.screen_EndY);
+
+					if (g_settings.video_Format == 1)
+						g_PicViewer->SetAspectRatio(16.0/9);
+					else
+						g_PicViewer->SetAspectRatio(4.0/3);
+
+					g_PicViewer->ShowImage((*entries)[0].resources[preferred].url, false);
+					
+					return;
+				}
+				#endif
+			}
+		} 
+		else 
+		{
+			neutrino_msg_t      msg;
+			neutrino_msg_data_t data;
+			g_RCInput->getMsg(&msg, &data, 10); // 1 sec timeout to update play/stop state display
+
+			if( msg == CRCInput::RC_home)
+			{
+				m_folderplay = false;
+				break;
+			}
+		}
+	}
+	
+	//
+	m_frameBuffer->ClearFrameBuffer();
+	m_frameBuffer->blit();
+}
+
+bool CUpnpBrowserGui::selectItem(std::string id)
+{
+	bool loop = true;
+	bool endall = false;
+	bool changed = true;
+	bool rchanged = true;
+	neutrino_msg_t      msg;
+	neutrino_msg_data_t data;
+	std::vector<UPnPEntry> *entries;
+	unsigned int index, selected, dirnum;
+
+	index = 0;
+	selected = 0;
+	dirnum = 0;
+	entries = NULL;
+
+	while (loop)
+	{
+		updateTimes();		
+		
+		if (rchanged)
+		{
+			if (entries)
+				delete entries;
+			
+			entries = NULL;
+
+			std::list<UPnPAttribute>attribs;
+			std::list<UPnPAttribute>results;
+			std::list<UPnPAttribute>::iterator i;
+			std::stringstream sindex;
+			std::stringstream scount;
+			unsigned int returned = 0;
+
+			bool rfound = false;
+			bool nfound = false;
+			bool tfound = false;
+
+			sindex << index;
+			scount << m_listmaxshow;
+
+			attribs.push_back(UPnPAttribute("ObjectID", id));
+			attribs.push_back(UPnPAttribute("BrowseFlag", "BrowseDirectChildren"));
+			attribs.push_back(UPnPAttribute("Filter", "*"));
+			attribs.push_back(UPnPAttribute("StartingIndex", sindex.str()));
+			attribs.push_back(UPnPAttribute("RequestedCount", scount.str()));
+			attribs.push_back(UPnPAttribute("SortCriteria", ""));
+
+			results=m_devices[m_selecteddevice].SendSOAP("urn:schemas-upnp-org:service:ContentDirectory:1", "Browse", attribs);
+			for (i=results.begin(); i!=results.end(); i++)
+			{
+				if (i->first == "NumberReturned")
+				{
+					returned = atoi(i->second.c_str());
+					nfound = true;
+				}
+				if (i->first == "TotalMatches")
+				{
+					dirnum = atoi(i->second.c_str());
+					tfound = true;
+				}
+				if (i->first == "Result")
+				{
+					entries = decodeResult(i->second);
+					rfound = true;
+				}
+			}
+			if (!entries)
+				return endall;
+			if (!nfound || !tfound || !rfound)
+			{
+				delete entries;
+				return endall;
+			}
+			if (returned != entries->size())
+			{
+				delete entries;
+				return endall;
+			}
+
+			if (returned == 0)
+			{
+				delete entries;
+				return endall;
+			}
+			rchanged=false;
+			changed=true;
+		}
+
+		if (changed)
+		{
+			paintItem(entries, selected - index, dirnum - index, index);
+			changed = false;
+		}
+		
+		m_frameBuffer->blit();
+
+		g_RCInput->getMsg(&msg, &data, 10); // 1 sec timeout to update play/stop state display
+		neutrino_msg_t msg_repeatok = msg & ~CRCInput::RC_Repeat;
+
+		if( msg == CRCInput::RC_timeout)
+		{
+			// nothing
+		}
+		else if(msg == CRCInput::RC_home)
+		{
+			loop = false;
+			endall = true;
+		}
+		else if(msg == CRCInput::RC_left)
+		{
+			loop = false;
+		}
+
+		else if (msg_repeatok == CRCInput::RC_up && selected > 0)
+		{
+			selected--;
+			if (selected < index)
+			{
+				index -= m_listmaxshow;
+				rchanged = true;
+			}
+			changed=true;
+		}
+
+		else if( (msg == CRCInput::RC_yellow/*green*/ || (int) msg == g_settings.key_channelList_pageup) && selected > 0)
+		{
+			if (index > 0)
+			{
+				index-=m_listmaxshow;
+				selected-=m_listmaxshow;
+				rchanged=true;
+			}
+			else
+				selected=0;
+			changed = true;
+		}
+		else if (msg_repeatok == CRCInput::RC_down && selected + 1 < dirnum)
+		{
+			selected++;
+			if (selected + 1 > index + m_listmaxshow)
+			{
+				index += m_listmaxshow;
+				rchanged = true;
+			}
+			changed=true;
+		}
+		else if( (msg == CRCInput::RC_green/*red*/ || (int) msg == g_settings.key_channelList_pagedown)&& selected + 1 < dirnum)
+		{
+			if (index < ((dirnum - 1) / m_listmaxshow) * m_listmaxshow)
+			{
+				index += m_listmaxshow;
+				selected += m_listmaxshow;
+				if (selected + 1 >= dirnum)
+					selected = dirnum - 1;
+				rchanged = true;
+			}
+			else
+				selected = dirnum - 1;
+			changed = true;
+		}
+		else if(msg == CRCInput::RC_right)
+		{
+			if ((*entries)[selected - index].isdir)
+			{
+				endall = selectItem((*entries)[selected - index].id);
+				if (endall)
+					loop = false;
+			}
+			changed = true;
+		}
+		else if(msg == CRCInput::RC_ok)
+		{
+			if (!(*entries)[selected - index].isdir)
+			{
+				m_folderplay = false;
+				
+				int preferred=(*entries)[selected - index].preferred;
+				if (preferred != -1)
+				{
+					std::string protocol, prot, network, mime, additional;
+					protocol=(*entries)[selected - index].resources[preferred].protocol;
+					splitProtocol(protocol, prot, network, mime, additional);
+					
+					if (mime == "audio/mpeg")
+					{
+						CAudiofile mp3((*entries)[selected - index].resources[preferred].url, CFile::FILE_MP3);
+						CAudioPlayer::getInstance()->play(&mp3, g_settings.audioplayer_highprio == 1);
+					}
+					else if (mime == "audio/x-vorbis+ogg")
+					{
+						CAudiofile mp3((*entries)[selected - index].resources[preferred].url, CFile::FILE_OGG);
+						CAudioPlayer::getInstance()->play(&mp3, g_settings.audioplayer_highprio == 1);
+					}
+					else if ((mime == "image/gif") || (mime == "image/jpeg"))
+					{
+						bool _loop = true;
+						
+						g_PicViewer->SetScaling((CFrameBuffer::ScalingMode)g_settings.picviewer_scaling);
+						g_PicViewer->SetVisible(g_settings.screen_StartX, g_settings.screen_EndX, g_settings.screen_StartY, g_settings.screen_EndY);
+
+						if(g_settings.video_Ratio == 1)
+							g_PicViewer->SetAspectRatio(16.0/9);
+						else
+							g_PicViewer->SetAspectRatio(4.0/3);
+
+
+						g_PicViewer->ShowImage((*entries)[selected - index].resources[preferred].url);
+						
+						while (_loop)
+						{
+							g_RCInput->getMsg(&msg, &data, 10); // 1 sec timeout to update play/stop state display
+
+							if( msg == CRCInput::RC_home)
+								_loop = false;
+						}
+					
+						m_frameBuffer->ClearFrameBuffer();
+						m_frameBuffer->blit();	
+
+						changed = true;
+					}
+
+					else if (mime.substr(0,6) == "video/")
+					{
+						m_frameBuffer->ClearFrameBuffer();
+						m_frameBuffer->blit();	
+						
+						moviePlayerGui->filename = (*entries)[selected - index].resources[preferred].url.c_str(); //FIXME
+						moviePlayerGui->exec(NULL, "urlplayback");
+						
+						//test
+						// stop playback
+						g_Zapit->lockPlayBack();
+						
+						changed = true;
+					}
+					
+					m_playing_entry = (*entries)[selected - index];
+				}
+
+			} 
+			else 
+			{
+				m_folderplay = true;
+				m_playfolder = (*entries)[selected - index].id;
+				m_playid = 0;
+				playnext();
+			}
+			
+			changed = true;
+		}
+		else if( msg == CRCInput::RC_red/*yellow*/)
+		{
+			if(CAudioPlayer::getInstance()->getState() != CBaseDec::STOP)
+				CAudioPlayer::getInstance()->stop();
+			m_folderplay = false;
+		}
+		else if(msg == NeutrinoMessages::RECORD_START ||
+			msg == NeutrinoMessages::ZAPTO ||
+			msg == NeutrinoMessages::STANDBY_ON ||
+			msg == NeutrinoMessages::SHUTDOWN ||
+			msg == NeutrinoMessages::SLEEPTIMER)
+		{
+			loop = false;
+			g_RCInput->postMsg(msg, data);
+		}
+
+		else if(msg == NeutrinoMessages::EVT_TIMER)
+		{
+			CNeutrinoApp::getInstance()->handleMsg( msg, data );
+		}
+		else
+		{
+			if( CNeutrinoApp::getInstance()->handleMsg( msg, data ) & messages_return::cancel_all )
+				loop = false;
+			changed = true;
+		}
+
+		if (m_folderplay && (CAudioPlayer::getInstance()->getState() == CBaseDec::STOP))
+			playnext();
+								
+		m_frameBuffer->blit();	
+	}
+	
+	if (entries)
+		delete entries;
+	
+	m_frameBuffer->ClearFrameBuffer();
+	m_frameBuffer->blit();
+	
+	return endall;
+}
+
+void CUpnpBrowserGui::paintDevicePos(unsigned int pos)
+{
+	int ypos = m_y + m_title_height + m_theight + pos*m_fheight;
+	uint8_t    color;
+	fb_pixel_t bgcolor;
+
+	if (pos == m_selecteddevice)
+	{
+		color   = COL_MENUCONTENT + 2;
+		bgcolor = COL_MENUCONTENT_PLUS_2;
+	}
+	else
+	{
+		color   = COL_MENUCONTENT;
+		bgcolor = COL_MENUCONTENT_PLUS_0;
+	}
+	m_frameBuffer->paintBoxRel(m_x, ypos, m_width - 15, m_fheight, bgcolor);
+
+	if (pos + m_indexdevice >= m_devices.size())
+		return;
+
+	char sNr[20];
+	sprintf(sNr, "%2d", pos + 1);
+	std::string num = sNr;
+
+	std::string name = m_devices[pos + m_indexdevice].friendlyname;
+
+	int w = g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->getRenderWidth(name) + 5;
+	g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->RenderString(m_x + 10, ypos + m_fheight, m_width - 30 - w, num, color, m_fheight, true); // UTF-8
+	g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->RenderString(m_x + m_width - 15 - w, ypos + m_fheight, w, name, color, m_fheight, true); // UTF-8
+}
+
+void CUpnpBrowserGui::paintItemPos(std::vector<UPnPEntry> *entry, unsigned int pos, unsigned int selected)
+{
+	int ypos = m_y + m_title_height + m_theight + pos*m_fheight;
+	uint8_t    color;
+	fb_pixel_t bgcolor;
+
+	if (pos == selected)
+	{
+		color   = COL_MENUCONTENT + 2;
+		bgcolor = COL_MENUCONTENT_PLUS_2;
+		paintDetails(entry, pos);
+		if ((*entry)[pos].isdir)
+			paintItem2DetailsLine (-1, pos); // clear it
+		else
+			paintItem2DetailsLine (pos, pos);
+	}
+	else
+	{
+		color   = COL_MENUCONTENT;
+		bgcolor = COL_MENUCONTENT_PLUS_0;
+	}
+	
+	m_frameBuffer->paintBoxRel(m_x, ypos, m_width - 15, m_fheight, bgcolor);
+
+	if (pos >= entry->size())
+		return;
+
+	int preferred=(*entry)[pos].preferred;
+	std::string info;
+	std::string fileicon;
+	if ((*entry)[pos].isdir)
+	{
+		info = "<DIR>";
+		fileicon = NEUTRINO_ICON_FOLDER;
+	}
+	else
+	{
+		//FIXME: revise this
+		if (preferred != -1)
+		{
+			info = (*entry)[pos].resources[preferred].duration;
+			//FIXME
+			fileicon = NEUTRINO_ICON_MP3;
+		}
+		else
+		{
+			info = "(none)";
+			fileicon = NEUTRINO_ICON_FILE;
+		}
+	}
+
+	std::string name = (*entry)[pos].title;
+	char tmp_time[] = "00:00:00.0";
+	int w = g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->getRenderWidth(tmp_time);
+
+	m_frameBuffer->paintIcon(fileicon, m_x + 5 , ypos + (m_fheight - 16) / 2);
+	g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->RenderString(m_x + m_width - 15 - w, ypos + m_fheight, w, info, color, m_fheight);
+	g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->RenderString(m_x + 30, ypos + m_fheight, m_width - 50 - w, name, color, m_fheight, true); // UTF-8
+}
+
+void CUpnpBrowserGui::paintDevice()
+{
+	std::string tmp;
+	int w, xstart, ypos, top;
+
+	// LCD
+	CVFD::getInstance()->setMode(CVFD::MODE_MENU_UTF8, "Select UPnP Device");
+	CVFD::getInstance()->showMenuText(0, m_devices[m_selecteddevice].friendlyname.c_str(), -1, true);
+
+	// Info
+	m_frameBuffer->paintBoxRel(m_x, m_y, m_width, m_title_height - 10, COL_MENUCONTENT_PLUS_6 );
+	m_frameBuffer->paintBoxRel(m_x + 2, m_y + 2, m_width - 4, m_title_height - 14, COL_MENUCONTENTSELECTED_PLUS_0 );
+
+	// first line
+	tmp = m_devices[m_selecteddevice].manufacturer + " " + m_devices[m_selecteddevice].manufacturerurl;
+	w = g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->getRenderWidth(tmp, true); // UTF-8
+	xstart = (m_width - w) / 2;
+	if(xstart < 10)
+		xstart = 10;
+	g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->RenderString(m_x + xstart, m_y + 4 + 1*m_mheight, m_width - 20, tmp, COL_MENUCONTENTSELECTED, 0, true); // UTF-8
+
+	// second line
+	tmp = m_devices[m_selecteddevice].modelname + " " +
+		m_devices[m_selecteddevice].modelnumber + " " +
+		m_devices[m_selecteddevice].modeldescription;
+	w = g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->getRenderWidth(tmp, true); // UTF-8
+	xstart = (m_width - w) / 2;
+	if(xstart < 10)
+		xstart = 10;
+	g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->RenderString(m_x + xstart, m_y + 4 + 2*m_mheight, m_width - 20, tmp, COL_MENUCONTENTSELECTED, 0, true); // UTF-8
+	// third line
+	tmp = m_devices[m_selecteddevice].modelurl;
+	w = g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->getRenderWidth(tmp, true); // UTF-8
+	xstart = (m_width - w) / 2;
+	if(xstart < 10)
+		xstart = 10;
+	g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->RenderString(m_x + xstart, m_y + 4 + 3*m_mheight, m_width - 20, tmp, COL_MENUCONTENTSELECTED, 0, true); // UTF-8
+
+	// Head
+	tmp = g_Locale->getText(LOCALE_UPNPBROWSER_HEAD);
+	m_frameBuffer->paintBoxRel(m_x, m_y + m_title_height, m_width, m_theight, COL_MENUHEAD_PLUS_0, RADIUS_MID, CORNER_TOP);
+	m_frameBuffer->paintIcon(NEUTRINO_ICON_UPNP, m_x + BORDER_LEFT, m_y + m_title_height + (m_theight -icon_head_h)/2);
+	g_Font[SNeutrinoSettings::FONT_TYPE_MENU_TITLE]->RenderString(m_x + BORDER_LEFT + icon_head_w + 5, m_y + m_theight + m_title_height + 0, m_width - 45, tmp, COL_MENUHEAD, 0, true); // UTF-8
+	ypos = m_y + m_title_height;
+	if(m_theight > icon_head_h)
+		ypos = (m_theight - icon_head_h) / 2 + m_y + m_title_height;
+
+	// Items
+	for (unsigned int count = 0; count < m_listmaxshow; count++)
+		paintDevicePos(count);
+
+	ypos = m_y + m_title_height + m_theight;
+	int sb = m_fheight * m_listmaxshow;
+	m_frameBuffer->paintBoxRel(m_x + m_width - SCROLLBAR_WIDTH, ypos, SCROLLBAR_WIDTH, sb, COL_MENUCONTENT_PLUS_1);
+
+	int sbc = ((m_devices.size() - 1) / m_listmaxshow) + 1;
+	int sbs = ((m_selecteddevice) / m_listmaxshow);
+
+	m_frameBuffer->paintBoxRel(m_x + m_width - 13, ypos + 2 + sbs*(sb-4)/sbc, 11, (sb-4)/sbc, COL_MENUCONTENT_PLUS_3);
+
+	// Foot
+	top = m_y + (m_height - m_info_height - 2*m_buttonHeight);
+
+	int ButtonWidth = (m_width - BORDER_LEFT - BORDER_RIGHT) / 4;
+	m_frameBuffer->paintBoxRel(m_x, top, m_width, m_buttonHeight, COL_MENUHEAD_PLUS_0, RADIUS_MID, CORNER_BOTTOM);
+	//m_frameBuffer->paintHLine(m_x, m_x + m_width, top, COL_INFOBAR_SHADOW_PLUS_0);
+	::paintButtons(m_frameBuffer, g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL], g_Locale, m_x + BORDER_LEFT + 3*ButtonWidth, top + (m_buttonHeight - icon_foot_h)/2, ButtonWidth, 1, &RescanButton);
+
+	//clearItem2DetailsLine(); // clear it
+}
+
+void CUpnpBrowserGui::paintItem(std::vector<UPnPEntry> *entry, unsigned int selected, unsigned int max, unsigned int offset)
+{
+	std::string tmp;
+	std::stringstream ts;
+	int w, xstart, ypos, top;
+	int preferred=(*entry)[selected].preferred;
+
+	// LCD
+	CVFD::getInstance()->setMode(CVFD::MODE_MENU_UTF8, "Select UPnP Entry");
+	CVFD::getInstance()->showMenuText(0, (*entry)[selected].title.c_str(), -1, true);
+
+	// Info
+	m_frameBuffer->paintBoxRel(m_x, m_y, m_width, m_title_height - 10, COL_MENUCONTENT_PLUS_6);
+	m_frameBuffer->paintBoxRel(m_x + 2, m_y + 2, m_width - 4, m_title_height - 14, COL_MENUCONTENTSELECTED_PLUS_0);
+
+	// first line
+	ts << "Resources: " << (*entry)[selected].resources.size() << " Selected: " << preferred+1 << " ";
+	tmp = ts.str();
+
+	if (preferred != -1)
+		tmp = tmp + "Duration: " + (*entry)[selected].resources[preferred].duration;
+	else
+		tmp = tmp + "No resource for Item";
+	w = g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->getRenderWidth(tmp, true); // UTF-8
+	if (w > m_width - 20)
+		w = m_width - 20;
+	xstart = (m_width - w) / 2;
+	if(xstart < 10)
+		xstart = 10;
+	g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->RenderString(m_x + xstart, m_y + 4 + 1*m_mheight, m_width - 20, tmp, COL_MENUCONTENTSELECTED, 0, true); // UTF-8
+
+	// second line
+	if ((*entry)[selected].isdir)
+		tmp = "Directory";
+	else
+	{
+		tmp = "";
+		if (preferred != -1)
+		{
+			std::string proto, network, mime, info;
+			splitProtocol((*entry)[selected].resources[preferred].protocol, proto, network, mime, info);
+			tmp = "Protocol: " + proto + ", MIME-Type: " + mime;
+		}
+
+	}
+	w = g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->getRenderWidth(tmp, true); // UTF-8
+	if (w > m_width - 20)
+		w = m_width - 20;
+	xstart = (m_width - w) / 2;
+	if(xstart < 10)
+		xstart = 10;
+	g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->RenderString(m_x + xstart, m_y + 4 + 2*m_mheight, m_width - 20, tmp, COL_MENUCONTENTSELECTED, 0, true); // UTF-8
+
+	//third line
+	tmp = "";
+	if (!(*entry)[selected].isdir)
+	{
+		if (preferred != -1)
+		{
+			tmp = "URL: " + (*entry)[selected].resources[preferred].url;
+		}
+
+	}
+	w = g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->getRenderWidth(tmp, true); // UTF-8
+	if (w > m_width - 20)
+		w = m_width - 20;
+	xstart = (m_width - w) / 2;
+	if(xstart < 10)
+		xstart = 10;
+	g_Font[SNeutrinoSettings::FONT_TYPE_MENU]->RenderString(m_x + xstart, m_y + 4 + 3*m_mheight, m_width - 20, tmp, COL_MENUCONTENTSELECTED, 0, true); // UTF-8
+
+
+	// Head
+	tmp = g_Locale->getText(LOCALE_UPNPBROWSER_HEAD);
+	m_frameBuffer->paintBoxRel(m_x, m_y + m_title_height, m_width, m_theight, COL_MENUHEAD_PLUS_0, RADIUS_MID, CORNER_TOP);
+	m_frameBuffer->paintIcon(NEUTRINO_ICON_UPNP, m_x + BORDER_LEFT, m_y + m_title_height + (m_theight - icon_head_h)/2);
+	g_Font[SNeutrinoSettings::FONT_TYPE_MENU_TITLE]->RenderString(m_x + BORDER_LEFT + icon_head_w + 5, m_y + m_theight + m_title_height, m_width - 45, tmp, COL_MENUHEAD, 0, true); // UTF-8
+	
+	//
+	ypos = m_y + m_title_height;
+	if(m_theight > icon_head_h)
+		ypos = (m_theight - icon_head_h) / 2 + m_y + m_title_height;
+
+	// Items
+	for (unsigned int count = 0; count < m_listmaxshow; count++)
+		paintItemPos(entry, count, selected);
+
+	ypos = m_y + m_title_height + m_theight;
+	int sb = m_fheight * m_listmaxshow;
+	m_frameBuffer->paintBoxRel(m_x + m_width - SCROLLBAR_WIDTH, ypos, SCROLLBAR_WIDTH, sb, COL_MENUCONTENT_PLUS_1);
+
+	int sbc = ((max + offset - 1) / m_listmaxshow) + 1;
+	int sbs = ((selected + offset) / m_listmaxshow);
+
+	int sbh = 0;
+	if ((sbc > 0) && (sbc > sb - 4))
+		sbh = 2;
+	m_frameBuffer->paintBoxRel(m_x + m_width - 13, ypos + 2 + sbs*((sb - 4)/sbc + sbh), 11, (sb - 4)/sbc + sbh, COL_MENUCONTENT_PLUS_3);
+
+	// Foot buttons
+	top = m_y + (m_height - m_info_height - 2*m_buttonHeight);
+	int ButtonWidth = (m_width - 20) / 4;
+	m_frameBuffer->paintBoxRel(m_x, top, m_width, m_buttonHeight, COL_MENUHEAD_PLUS_0, RADIUS_MID, CORNER_BOTTOM);
+	
+	::paintButtons(m_frameBuffer, g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL], g_Locale, m_x + BORDER_LEFT, top + (m_buttonHeight - icon_foot_h)/2, ButtonWidth, 1, &StopButton);
+	::paintButtons(m_frameBuffer, g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL], g_Locale, m_x + BORDER_LEFT + ButtonWidth, top + (m_buttonHeight - icon_foot_h)/2, ButtonWidth, 1, &PUpButton);
+	::paintButtons(m_frameBuffer, g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL], g_Locale, m_x + BORDER_LEFT + 2*ButtonWidth, top + (m_buttonHeight - icon_foot_h)/2, ButtonWidth, 1, &PDownButton);
+
+	m_frameBuffer->paintIcon(NEUTRINO_ICON_BUTTON_OKAY, m_x + BORDER_LEFT + 3*ButtonWidth, top + (m_buttonHeight - icon_foot_h)/2);
+	g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL]->RenderString(m_x + BORDER_LEFT + 3*ButtonWidth + icon_foot_w + 5, top + (m_buttonHeight - g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL]->getHeight())/2 + g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL]->getHeight(), ButtonWidth - 40, g_Locale->getText(LOCALE_AUDIOPLAYER_PLAY), COL_INFOBAR, 0, true); // UTF-8
+}
+
+void CUpnpBrowserGui::paintDetails(std::vector<UPnPEntry> *entry, unsigned int index, bool use_playing)
+{
+	// Foot info
+	int top = m_y + (m_height - m_info_height - 1*m_buttonHeight) + 2;
+
+	if ((!use_playing) && ((*entry)[index].isdir))
+	{
+		m_frameBuffer->paintBackgroundBoxRel(m_x + 2, top + 2, m_width - 4, 2*m_buttonHeight);
+	}
+	else
+	{
+		if (use_playing) 
+		{
+			if (!m_playing_entry_is_shown) 
+			{
+				m_frameBuffer->paintBoxRel(m_x + 2, top + 2, m_width - 4, 2*m_buttonHeight, COL_MENUCONTENTDARK_PLUS_0);
+				m_playing_entry_is_shown = true;
+				g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->RenderString(m_x + 5, top + 2 + (m_buttonHeight - g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->getHeight())/2 + g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->getHeight(), m_x + m_width - 10, m_playing_entry.title + " - " + m_playing_entry.artist, COL_INFOBAR, 0, true); // UTF-8
+				g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->RenderString(m_x + 5, top + 2 + m_buttonHeight + (m_buttonHeight - g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->getHeight())/2 + g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->getHeight(), m_x + m_width - 10, m_playing_entry.album, COL_INFOBAR, 0, true); // UTF-8
+			}
+		} 
+		else 
+		{
+			if (entry == NULL) 
+				return;
+			
+			m_frameBuffer->paintBoxRel(m_x + 2, top + 2, m_width - 4, 2*m_buttonHeight, COL_MENUCONTENTDARK_PLUS_0);
+			m_playing_entry_is_shown = false;
+			g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->RenderString(m_x + 5, top + 2 + (m_buttonHeight - g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->getHeight())/2 + g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->getHeight(), m_x + m_width - 10, (*entry)[index].title + " - " + (*entry)[index].artist, COL_INFOBAR, 0, true); // UTF-8
+			g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->RenderString(m_x + 5, top + m_buttonHeight + (m_buttonHeight - g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->getHeight())/2 + g_Font[SNeutrinoSettings::FONT_TYPE_FILEBROWSER_ITEM]->getHeight(), m_x + m_width - 10, (*entry)[index].album, COL_INFOBAR, 0, true); // UTF-8
+		}
+	}
+}
+
+//
+// -- Decoreline to connect ChannelDisplayLine with ChannelDetail display
+// -- 2002-03-17 rasc
+//
+void CUpnpBrowserGui::clearItem2DetailsLine()
+{
+	paintItem2DetailsLine (-1, 0);
+}
+
+void CUpnpBrowserGui::paintItem2DetailsLine(int pos, unsigned int /*ch_index*/)
+{
+	int xpos  = m_x - ConnectLineBox_Width;
+	int ypos1 = m_y + m_title_height + m_theight + pos*m_fheight;
+	int ypos2 = m_y + (m_height - m_info_height - 1 * m_buttonHeight) + 2;
+
+	int ypos1a = ypos1 + (m_fheight/2)-2;
+	int ypos2a = ypos2 + (m_info_height/2) - 2;
+	fb_pixel_t col1 = COL_MENUCONTENT_PLUS_6;
+	fb_pixel_t col2 = COL_MENUCONTENT_PLUS_1;
+
+	// Clear
+	m_frameBuffer->paintBackgroundBoxRel(xpos, m_y + m_title_height, ConnectLineBox_Width, m_height + m_info_height - (m_y + m_title_height));
+	
+	if (pos < 0) 
+	{
+		m_frameBuffer->paintBackgroundBoxRel(m_x, m_y + (m_height - m_info_height - 1* m_buttonHeight) + 2, m_width, m_info_height);
+	}
+	
+	// paint Line if detail info (and not valid list pos)
+	if (pos >= 0)
+	{
+		// 1. col thick line
+		m_frameBuffer->paintBoxRel(xpos + ConnectLineBox_Width - 4,  ypos1, 4,  m_fheight,     col1);
+		m_frameBuffer->paintBoxRel(xpos + ConnectLineBox_Width - 4,  ypos2, 4,  m_info_height, col1);
+
+		m_frameBuffer->paintBoxRel(xpos + ConnectLineBox_Width - 15, ypos1a, 4, ypos2a - ypos1a, col1);
+
+		m_frameBuffer->paintBoxRel(xpos + ConnectLineBox_Width - 15, ypos1a, 12, 4, col1);
+		m_frameBuffer->paintBoxRel(xpos + ConnectLineBox_Width - 15, ypos2a, 12, 4, col1);
+
+		// 2. col small line
+		m_frameBuffer->paintBoxRel(xpos + ConnectLineBox_Width - 4, ypos1, 1, m_fheight, col2);
+		m_frameBuffer->paintBoxRel(xpos + ConnectLineBox_Width - 4, ypos2, 1, m_info_height, col2);
+
+		m_frameBuffer->paintBoxRel(xpos + ConnectLineBox_Width - 15, ypos1a, 1, ypos2a - ypos1a + 4, col2);
+
+		m_frameBuffer->paintBoxRel(xpos + ConnectLineBox_Width - 15, ypos1a, 12, 1, col2);
+		m_frameBuffer->paintBoxRel(xpos + ConnectLineBox_Width - 12, ypos2a, 8,  1, col2);
+
+		// -- small Frame around infobox
+		m_frameBuffer->paintBoxRel(m_x, ypos2, 2, m_info_height, col1);
+		m_frameBuffer->paintBoxRel(m_x+m_width-2, ypos2, 2, m_info_height, col1);
+		m_frameBuffer->paintBoxRel(m_x, ypos2, m_width - 2, 2, col1);
+		m_frameBuffer->paintBoxRel(m_x , ypos2 + m_info_height - 2, m_width - 2, 2, col1);
+	}
+}
+
+void CUpnpBrowserGui::updateTimes(const bool force)
+{
+	int top;
+	
+	if(CAudioPlayer::getInstance()->getState() != CBaseDec::STOP)
+	{
+		bool updatePlayed = force;
+
+		if ((m_time_played != CAudioPlayer::getInstance()->getTimePlayed()))
+		{
+			m_time_played = CAudioPlayer::getInstance()->getTimePlayed();
+			updatePlayed = true;
+		}
+		
+		char play_time[8];
+		snprintf(play_time, 7, "%ld:%02ld", m_time_played / 60, m_time_played % 60);
+		char tmp_time[] = "000:00";
+		int w = g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL]->getRenderWidth(tmp_time);
+
+		if (updatePlayed)
+		{
+			paintDetails(NULL, 0, true);
+			top = m_y + (m_height - m_info_height - 1 * m_buttonHeight) + m_buttonHeight + 4;
+			m_frameBuffer->paintBoxRel(m_x + m_width - w - 15, top + 1, w + 4, m_buttonHeight, COL_MENUCONTENTDARK_PLUS_0);
+			g_Font[SNeutrinoSettings::FONT_TYPE_INFOBAR_SMALL]->RenderString(m_x + m_width - w - 11, top + 1 + m_buttonHeight, w, play_time, COL_MENUHEAD);			
+		}
+	}
+}
+
diff -Naur nhd2-exp.orig/src/gui/upnpbrowser.h nhd2-exp/src/gui/upnpbrowser.h
--- nhd2-exp.orig/src/gui/upnpbrowser.h	1970-01-01 01:00:00.000000000 +0100
+++ nhd2-exp/src/gui/upnpbrowser.h	2014-12-29 21:48:35.000000000 +0100
@@ -0,0 +1,121 @@
+/*
+  Neutrino-GUI  -   DBoxII-Project
+
+  Copyright (C) 2001 Steffen Hehn 'McClean'
+  Homepage: http://dbox.cyberphoria.org/
+
+  Kommentar:
+
+  Diese GUI wurde von Grund auf neu programmiert und sollte nun vom
+  Aufbau und auch den Ausbaumoeglichkeiten gut aussehen. Neutrino basiert
+  auf der Client-Server Idee, diese GUI ist also von der direkten DBox-
+  Steuerung getrennt. Diese wird dann von Daemons uebernommen.
+
+
+  License: GPL
+
+  This program is free software; you can redistribute it and/or modify
+  it under the terms of the GNU General Public License as published by
+  the Free Software Foundation; either version 2 of the License, or
+  (at your option) any later version.
+
+  This program is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+*/
+
+#ifndef __upnpplayergui__
+#define __upnpplayergui__
+
+#include "driver/framebuffer.h"
+#include "driver/audiofile.h"
+#include "driver/pictureviewer/pictureviewer.h"
+#include "gui/filebrowser.h"
+#include "gui/widget/menue.h"
+
+#include <string>
+#include <sstream>
+#include <upnpclient.h>
+
+
+struct UPnPResource
+{
+	std::string	url;
+	std::string	protocol;
+	std::string	size;
+	std::string	duration;
+};
+
+struct UPnPEntry
+{
+	std::string	id;
+	bool		isdir;
+	std::string	title;
+	std::string	artist;
+	std::string	album;
+	std::string	children;
+	std::vector<UPnPResource> resources;
+	int		preferred;
+};
+
+class CUpnpBrowserGui : public CMenuTarget
+{
+	public:
+		CUpnpBrowserGui();
+		~CUpnpBrowserGui();
+		int exec(CMenuTarget* parent, const std::string & actionKey);
+
+	private:
+		std::vector<CUPnPDevice> m_devices;
+		UPnPEntry      m_playing_entry;
+		CUPnPSocket  * m_socket;
+		CFrameBuffer * m_frameBuffer;
+		//bool           m_vol_ost;
+		int            m_LastMode;
+		int            m_width;
+		int            m_height;
+		int            m_x;
+		int            m_y;
+		unsigned int   m_listmaxshow;
+		unsigned int   m_indexdevice;
+		unsigned int   m_selecteddevice;
+		int            m_fheight; // Fonthoehe Inhalt
+		int            m_theight; // Fonthoehe Titel
+		int            m_mheight; // Fonthoehe Info
+		int            m_sheight; // Fonthoehe Status
+		int            m_buttonHeight;
+		int            m_title_height;
+		int            m_info_height;
+		bool           m_folderplay;
+		std::string    m_playfolder;
+		int            m_playid;
+		time_t         m_time_played;
+		bool           m_playing_entry_is_shown;
+		
+		int icon_head_w;
+		int icon_head_h;
+		int icon_foot_w;
+		int icon_foot_h;
+
+		void selectDevice();
+		bool selectItem(std::string);
+		void paintItem(std::vector<UPnPEntry> *entry, unsigned int selected, unsigned int max, unsigned int offset);
+		void paintDevice();
+		std::vector<UPnPEntry> *decodeResult(std::string);
+		void playnext();
+		void splitProtocol(std::string &protocol, std::string &prot, std::string &network, std::string &mime, std::string &additional);
+		void paintItemPos  (std::vector<UPnPEntry> *entry, unsigned int pos, unsigned int selected);
+		void paintDevicePos(unsigned int pos);
+		void paintDetails(std::vector<UPnPEntry> *entry, unsigned int index, bool use_playing = false);
+		void clearItem2DetailsLine (void);
+		void paintItem2DetailsLine (int pos,unsigned  int ch_index);
+
+		void updateTimes(const bool force = false);
+};
+
+#endif
diff -Naur nhd2-exp.orig/src/neutrino.cpp nhd2-exp/src/neutrino.cpp
--- nhd2-exp.orig/src/neutrino.cpp	2014-12-29 21:40:25.000000000 +0100
+++ nhd2-exp/src/neutrino.cpp	2014-12-29 21:43:34.000000000 +0100
@@ -927,6 +927,9 @@
 	
 	// infobar show channel name
 	g_settings.show_channelname = configfile.getBool("show_channelname", true);
+
+	// infobar show logos left from EPG
+	g_settings.show_logos_left = configfile.getBool("show_logos_left", true);
 	
 	// vol
 	g_settings.volume_pos = configfile.getInt32( "volume_pos", 1);		//top_left
@@ -1367,6 +1370,9 @@
 	
 	// infobar show channelname
 	configfile.setBool("show_channelname", g_settings.show_channelname);
+
+	// infobar show logos left from EPG
+	configfile.setBool("show_logos_left", g_settings.show_logos_left);
 	
 	// record screenshot
 	configfile.setInt32("recording_screenshot", g_settings.recording_screenshot);
diff -Naur nhd2-exp.orig/src/neutrino_menue.cpp nhd2-exp/src/neutrino_menue.cpp
--- nhd2-exp.orig/src/neutrino_menue.cpp	2014-12-29 21:40:25.000000000 +0100
+++ nhd2-exp/src/neutrino_menue.cpp	2014-12-29 21:43:34.000000000 +0100
@@ -262,10 +262,10 @@
 	mainMenu.addItem(new CMenuForwarderItemMenuIcon(LOCALE_MAINMENU_SERVICE, true, NULL, &service, NULL, CRCInput::convertDigitToKey(shortcut++), NULL, NEUTRINO_ICON_MENUITEM_SERVICE, LOCALE_HELPTEXT_SERVICE ));
 	
 	// timerlist
-	mainMenu.addItem(new CMenuForwarderItemMenuIcon(LOCALE_TIMERLIST_NAME, true, NULL, Timerlist, NULL, CRCInput::convertDigitToKey(shortcut++), NULL, NEUTRINO_ICON_MENUITEM_SLEEPTIMER, LOCALE_HELPTEXT_TIMERLIST ));
+	//mainMenu.addItem(new CMenuForwarderItemMenuIcon(LOCALE_TIMERLIST_NAME, true, NULL, Timerlist, NULL, CRCInput::convertDigitToKey(shortcut++), NULL, NEUTRINO_ICON_MENUITEM_SLEEPTIMER, LOCALE_HELPTEXT_TIMERLIST ));
 	
 	// features
-	mainMenu.addItem(new CMenuForwarderItemMenuIcon(LOCALE_INFOVIEWER_FEATURES, true, NULL, this, "features", CRCInput::convertDigitToKey(shortcut++), NULL, NEUTRINO_ICON_MENUITEM_PLUGINS, LOCALE_HELPTEXT_FEATURES ));
+	//mainMenu.addItem(new CMenuForwarderItemMenuIcon(LOCALE_INFOVIEWER_FEATURES, true, NULL, this, "features", CRCInput::convertDigitToKey(shortcut++), NULL, NEUTRINO_ICON_MENUITEM_PLUGINS, LOCALE_HELPTEXT_FEATURES ));
 
 	//sleep timer
 	mainMenu.addItem( new CMenuSeparatorItemMenuIcon(CMenuSeparatorItemMenuIcon::LINE) );
@@ -1167,6 +1167,9 @@
 	
 	// infobar show channelname
 	miscSettingsGeneral.addItem(new CMenuOptionChooser(LOCALE_MISCSETTINGS_INFOBAR_SHOW_CHANNELNAME, &g_settings.show_channelname, OPTIONS_OFF0_ON1_OPTIONS, OPTIONS_OFF0_ON1_OPTION_COUNT, true ));
+
+	// infobar show logos left from EPG
+	miscSettingsGeneral.addItem(new CMenuOptionChooser(LOCALE_MISCSETTINGS_INFOBAR_SHOW_LOGOS_LEFT, &g_settings.show_logos_left, OPTIONS_OFF0_ON1_OPTIONS, OPTIONS_OFF0_ON1_OPTION_COUNT, true ));
 	
 	// recording screenshot
 	miscSettingsGeneral.addItem(new CMenuOptionChooser(LOCALE_MISCSETTINGS_RECORDING_SCREENSHOT, &g_settings.recording_screenshot, OPTIONS_OFF0_ON1_OPTIONS, OPTIONS_OFF0_ON1_OPTION_COUNT, true ));
diff -Naur nhd2-exp.orig/src/system/locals.h nhd2-exp/src/system/locals.h
--- nhd2-exp.orig/src/system/locals.h	2014-12-29 21:40:23.000000000 +0100
+++ nhd2-exp/src/system/locals.h	2014-12-29 21:43:34.000000000 +0100
@@ -602,6 +602,7 @@
 	LOCALE_MISCSETTINGS_INFOBAR_SAT_DISPLAY,
 	LOCALE_MISCSETTINGS_INFOBAR_COLORED_EVENTS,
 	LOCALE_MISCSETTINGS_INFOBAR_SHOW_CHANNELNAME,
+	LOCALE_MISCSETTINGS_INFOBAR_SHOW_LOGOS_LEFT,
 	LOCALE_MISCSETTINGS_INFOBAR_SHOWCA,
 	LOCALE_MISCSETTINGS_INFOBAR_RADIOTEXT,
 	LOCALE_MISCSETTINGS_INFOBAR_HDD_DISPLAY,
diff -Naur nhd2-exp.orig/src/system/locals_intern.h nhd2-exp/src/system/locals_intern.h
--- nhd2-exp.orig/src/system/locals_intern.h	2014-12-29 21:40:23.000000000 +0100
+++ nhd2-exp/src/system/locals_intern.h	2014-12-29 21:43:34.000000000 +0100
@@ -602,6 +602,7 @@
 	"miscsettings.infobar_sat_display",
 	"miscsettings.infobar_colored_events",
 	"miscsettings.infobar_show_channelname",
+	"miscsettings.infobar_show_logos_left",
 	"miscsettings.infobar_showca",
 	"miscsettings.infobar_radiotext",
 	"miscsettings.infobar_hddvar_display",
diff -Naur nhd2-exp.orig/src/system/settings.h nhd2-exp/src/system/settings.h
--- nhd2-exp.orig/src/system/settings.h	2014-12-29 21:40:23.000000000 +0100
+++ nhd2-exp/src/system/settings.h	2014-12-29 21:45:36.000000000 +0100
@@ -401,6 +401,7 @@
 	std::string logos_dir;
 	int epgplus_show_logo;
 	int show_channelname;
+	int show_logos_left;
 
 	// channellist
 	int zap_cycle;
diff -Naur nhd2-exp.orig/src/zapit/src/zapit.cpp nhd2-exp/src/zapit/src/zapit.cpp
--- nhd2-exp.orig/src/zapit/src/zapit.cpp	2014-12-29 21:40:24.000000000 +0100
+++ nhd2-exp/src/zapit/src/zapit.cpp	2014-12-29 21:46:40.000000000 +0100
@@ -96,7 +96,7 @@
 
 /* volume percent conf */
 #define VOLUME_DEFAULT_PCM 0
-#define VOLUME_DEFAULT_AC3 25
+#define VOLUME_DEFAULT_AC3 75
 typedef std::pair<int, int> pid_pair_t;
 typedef std::pair<t_channel_id, pid_pair_t> volume_pair_t;
 typedef std::multimap<t_channel_id, pid_pair_t> volume_map_t;
@@ -1461,7 +1461,7 @@
 	if (volume_percent != percent) 
 		volume_percent = percent;
 		
-	int vol = current_volume + (current_volume*volume_percent)/100;
+	int vol = current_volume + (current_volume*volume_percent+50)/100;
 		
 	dprintf(DEBUG_NORMAL, "[zapit] setVolumePercent: vol %d current_volume %d volume_percent %d\n", vol, current_volume, volume_percent);
 		
